using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using VikingEngine.ToGG.HeroQuest.Data;

namespace VikingEngine.DSSWars
{
    class FlagDesign
    {
        public static FlagDesign[] AiBanner;
        public static FlagDesign PlayerGriffin;
        //public static FlagDesign DarkLordBanner, DarkFollowersBanner, UnitedKingdomsBanner;

        public static void Init()
        {

            byte[] banner1 = new byte[]
            {
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,
            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
             };

            var AiBanner1 = new FlagDesign(banner1);

            byte[] banner2 = new byte[]
           {
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            };

            var AiBanner2 = new FlagDesign(banner2);

            byte[] banner3 = new byte[]
           {
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 2, 2,
            2, 2, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            };

            var AiBanner3 = new FlagDesign(banner3);

            byte[] banner4 = new byte[]
           {
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            };

            var AiBanner4 = new FlagDesign(banner4);

            byte[] banner5 = new byte[]
           {
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1,
            1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1,
            1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1,
            1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1,
            1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1,
            1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1,
            1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            };

            var AiBanner5 = new FlagDesign(banner5);
            AiBanner5.dataGrid.FromArray(banner5);

            byte[] banner6 = new byte[]
           {
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2,
            2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2,
            2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2,
            2, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2,
            2, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2,
            2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2,
            2, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2,
            2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            };

            var AiBanner6 = new FlagDesign(banner6);
            AiBanner6.dataGrid.FromArray(banner6);

            AiBanner = new FlagDesign[] {
                AiBanner1,
                AiBanner2,
                AiBanner3,
                AiBanner4,
                AiBanner5,
                AiBanner6,
            };

            PlayerGriffin = new FlagDesign(new byte[]
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0,
                0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 0,
                0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0,
                0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0,
                0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0,
                0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0,
                0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0,
                0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
            });
            //DarkLordBanner = new FlagDesign(new byte[]
            //{
            //    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            //    0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
            //    0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0,
            //    0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0,
            //    0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
            //    0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0,
            //    0, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 0, 0, 0, 2, 0,
            //    0, 2, 0, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 0, 2, 0,
            //    0, 2, 0, 2, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 2, 0,
            //    0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0,
            //    0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0,
            //    0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
            //    0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0,
            //    0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0,
            //    0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
            //    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            //});

        }

        public Grid2D<byte> dataGrid;

        public FlagDesign(System.IO.BinaryReader r)
        {
            basicInit();
            read(r);
        }

        public FlagDesign(byte[] bytearray)
        {
            basicInit();
            dataGrid.FromArray(bytearray);
        }

        public FlagDesign()
        {
            basicInit();

            byte[] swordBanner = new byte[]
            {
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,2,2,0,0,0,
                1,1,1,1,1,1,1,1,0,0,2,2,2,0,0,0,
                1,1,1,1,1,1,1,1,0,2,2,2,0,0,0,0,
                1,1,1,1,1,1,2,1,2,2,2,0,0,0,0,0,
                1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,
                1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,
                1,1,1,1,1,1,2,1,2,2,0,0,0,0,0,0,
                1,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
            };

            dataGrid.FromArray(swordBanner);
        }

        void basicInit()
        {
            dataGrid = new Grid2D<byte>(DssLib.UserHeraldicWidth);
        }

        public void write(System.IO.BinaryWriter w)
        {
            w.Write(dataGrid.ToArray());
        }

        public void read(System.IO.BinaryReader r)
        {
            byte[] array = new byte[dataGrid.Size.Area()];
            r.Read(array, 0, array.Length);
            dataGrid.FromArray(array);
        }

        public Color[] toColorArray(ProfileData factionVisual)
        {
            byte[] dataArray = dataGrid.ToArray();
            Color[] result = new Color[dataArray.Length];
            for (int i = 0; i < dataArray.Length; ++i)
            {
                result[i] = factionVisual.colors[dataArray[i]];
            }

            return result;
        }

        public Texture2D CreateTexture(ProfileData factionVisual)
        {
            var texture = new Texture2D(Engine.Draw.graphicsDeviceManager.GraphicsDevice, 
                DssLib.UserHeraldicWidth, DssLib.UserHeraldicWidth);
            texture.SetData(toColorArray(factionVisual));
            return texture; 
        }

        public FlagDesign Clone()
        {
            FlagDesign result = new FlagDesign();
            //result.colors = (Color[])this.colors.Clone();
            result.dataGrid = this.dataGrid.Clone();

            return result;
        }

        public bool Equals(FlagDesign other)
        {
            //for (int i = 0; i < ColorCount; ++i)
            //{
            //    if (this.colors[i] != other.colors[i])
            //    {
            //        return false;
            //    }
            //}

            return this.dataGrid.EqualData(other.dataGrid);
        }
    }

    
}
